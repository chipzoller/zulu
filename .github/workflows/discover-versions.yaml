# Requires a secret called MY_TOKEN to be set in the repo with a GitHub token that has gist permissions for read and write.
# Only one of IMAGE_REPO or HELM_REPO should be specified.
name: discover-versions
on:
  workflow_dispatch: {}
env:
  # The image repository to use for discovering tags.
  # IMAGE_REPO: gcr.io/kubecost1/cost-model
  # The Helm repository to use for discovering new releases.
  HELM_REPO: https://kubecost.github.io/cost-analyzer/
  # The Helm chart name to use for discovering new releases.
  HELM_CHART: cost-analyzer
  # The gist ID to use for storing the last discovered version.
  GIST: 5bb3e010e5817903768c381c017cfcb4
  # The gist file name to use for storing the last discovered version.
  GIST_FILE: last.txt
jobs:
  discover-new-tags:
    runs-on: ubuntu-latest
    outputs:
      is_newer: ${{ steps.compare-tags.outputs.is_newer }}   
      latest: ${{ steps.compare-tags.outputs.latest }}
    steps:
      - name: Install oras CLI
        uses: oras-project/setup-oras@v1
      # Get the latest tag from the specified IMAGE_REPO var but only return the latest version
      # which matches the pattern "prod-1.x.x", not any pre-releases or other tags.
      # Can also be used for Helm charts: helm search repo cost-analyzer -l -o json | jq -r .[].version | head -n1
      - name: Discover latest tag
        run: |
          if [[ -n $IMAGE_REPO && -n $HELM_REPO ]]; then
            echo "Both IMAGE_REPO and HELM_REPO are defined. This script expects one or the other. Failing."
            exit 1
          else
            echo "Conflicting variable check passed. Continuing."
          fi
          if [[ -n $IMAGE_REPO ]]; then
            echo "IMAGE_REPO is defined. Will use this to discover the latest tag."
            LATEST=$(oras repo tags $IMAGE_REPO | egrep '^prod-1.[0-9]+.[0-9]+$' | sort -t "." -k1,1n -k2,2n -k3,3n | tail -n1)
          else
            echo "HELM_REPO is defined. Will use this to discover the latest release."
            LATEST=$(helm repo add temp $HELM_REPO && helm search repo $HELM_CHART -l -o json | jq -r .[].version | head -n1)
          fi
          if [ -z "$LATEST" ]; then
            echo "No new tag or release found. Something is wrong. Failing."
            exit 1
          else
            echo "Latest discovered tag or release is: $LATEST"
            echo LATEST=$LATEST >> $GITHUB_ENV
          fi
      - name: Read current tag from gist
        uses: sergeysova/gist-read-action@v1
        id: read-gist
        env:
          GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}
        with:
          gist_id: ${{env.GIST}}
          file_name: ${{env.GIST_FILE}}
      - name: Compare latest tag to current tag from gist
        id: compare-tags
        run: |
          if [ "${{env.LATEST}}" = "${{ steps.read-gist.outputs.content }}" ]; then
            echo "No newer tag found. Exiting."
            exit 0
          else
            echo "A newer tag has been discovered. The current tag is ${{ steps.read-gist.outputs.content }} while the new tag is ${{env.LATEST}}. Will proceed with a release."
            echo is_newer=true >> $GITHUB_OUTPUT
            echo latest=${{env.LATEST}} >> $GITHUB_OUTPUT
          fi

  call-release:
    needs: discover-new-tags
    uses: ./.github/workflows/demo-releaser.yaml
    if: needs.discover-new-tags.outputs.is_newer == 'true'
    with:
      tag: ${{needs.discover-new-tags.outputs.latest}}

  mark-version-complete:
    needs: [discover-new-tags, call-release]
    runs-on: ubuntu-latest
    steps:
      - name: Updating current tag after successful release
        uses: sergeysova/gist-write-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}
        with:
          gist_id: ${{env.GIST}}
          file_name: ${{env.GIST_FILE}}
          content: ${{needs.discover-new-tags.outputs.latest}}