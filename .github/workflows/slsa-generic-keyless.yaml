### This workflow uses the SLSA generic provenance generator workflow
### (see https://github.com/slsa-framework/slsa-github-generator/blob/main/internal/builders/generic/README.md)
### to generate a SLSA provenance type predicate for a container image built by ko and attesting to it and others
### using keyless signing.
name: slsa-generic-keyless
on:
  push:
    tags:
      - v*
  workflow_dispatch: {}
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
jobs:
  # Publish with ko build
  build:
    runs-on: ubuntu-20.04
    permissions:
      packages: write
      contents: read
    outputs:
      image: ${{ steps.ko-build.outputs.image }}
      digest: ${{ steps.set-digest.outputs.digest }}
    steps:
    - name: Checkout code
      uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3.0.2
    - name: Setup Golang
      uses: actions/setup-go@b22fbbc2921299758641fab08929b4ac52b32923 # v3.2.0
      with:
        go-version: 1.18
    - name: Setup ko
      run: go install github.com/google/ko@cefd28f093ffb342237aa9d692eee247e82235d5 # v0.11.2
    - name: Log in to GHCR
      uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b # v2.0.0
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Publish image and SBOM (CycloneDX)
      id: ko-build
      run: |
        tag=$(echo ${{ github.ref }} | cut -c11-)
        IMAGE=$(ko build ./ --bare -t latest -t ${{ github.sha }} -t ${tag} --sbom=cyclonedx)
        echo "The image generated is: $IMAGE"
        echo "## Image summary" >> $GITHUB_STEP_SUMMARY
        echo "Built image: $IMAGE" >> $GITHUB_STEP_SUMMARY
        echo "IMAGE=$IMAGE" >> $GITHUB_ENV
        echo "::set-output name=image::$IMAGE"
      env:
        KO_DOCKER_REPO: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
    - name: Set digest
      id: set-digest
      run: |
        DIGEST=$(echo -n $IMAGE | cut -d ':' -f2)
        echo "Digest from image is: $DIGEST"
        echo "::set-output name=digest::$DIGEST"
  # Use the container SLSA provenance generator.
  provenance:
    permissions:
      id-token: write
      contents: write
      actions: read
      packages: write
    needs: build
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@main #1.2.0 failed
    with:
      compile-generator: true
      digest: "${{ needs.build.outputs.digest }}"
      registry-username: ${{ github.actor }}
      image: ghcr.io/${{ github.repository }}
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}
  # Scan the image using Trivy. Check the hash of the scan file to ensure no tampering between jobs.
  scan:
    runs-on: ubuntu-20.04
    needs: [provenance, build]
    permissions:
      contents: read
    outputs:
      scan-digest: ${{ steps.calculate-scan-hash.outputs.scan_digest }}
    env:
      IMAGE: "${{ needs.build.outputs.image }}"
    steps:
    - name: Scan for vulnerabilities
      uses: aquasecurity/trivy-action@1db49f532692e649dc5dc43c7c0444dac4790137 # v0.7.0 (Trivy v0.31.2)
      with: 
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE }}
        format: cosign-vuln
        ignore-unfixed: true
        output: scan.json
    # - name: Add scan metadata
    #   uses: sergeysova/jq-action@9ac92a6da6d616b4cebdddc0059e36a1ad43fab1 # v2.1.0
    #   with:
    #     cmd: cat trivy-scan.json | jq '. + {timestamp:(now|todateiso8601)}' | jq '. + {scanner:"trivy"}' > scan.json
    - name: Calculate scan file hash
      id: calculate-scan-hash
      run: |
        SCAN_DIGEST=$(sha256sum scan.json | awk '{print $1}')
        echo "::set-output name=scan_digest::$SCAN_DIGEST"
        echo "Hash of scan.json is: $SCAN_DIGEST"
    - name: Upload vulnerability scan report
      uses: actions/upload-artifact@6673cd052c4cd6fcf4b4e6e60ea986c889389535 # v3.0.0
      with:
        name: scan.json
        path: scan.json
        if-no-files-found: error
  # Uses Cosign to sign and attest to the provenance, scans, and SBOM predicates. Uses keyless signing for all steps.
  attest:
    runs-on: ubuntu-20.04
    permissions:
      contents: write
      actions: read
      packages: write
      id-token: write # Needed for OIDC and keyless signing
    env:
      IMAGE: "${{ needs.build.outputs.image }}"
      SCAN_DIGEST: "${{ needs.scan.outputs.scan-digest }}"
    needs: [provenance, scan, build]
    steps:
    # - name: Download attestations
    #   uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 # v3.0.0
    #   with:
    #     name: attestation.intoto.jsonl
    - name: Download scan
      uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 # v3.0.0
      with:
        name: scan.json
    # Detect potential tampering with the scan file by comparing the pre-upload digest in the previous
    # job with the post-download digest in this job. Fail if there is a mismatch.
    - name: Verify scan
      run: |
        set -euo pipefail
        echo "Hash of scan.json should be: $SCAN_DIGEST"
        COMPUTED_HASH=$(sha256sum scan.json | awk '{print $1}')
        echo "The current computed hash for scan.json is: $COMPUTED_HASH"
        echo "If the two above hashes don't match, scan.json has been tampered with."
        echo "$SCAN_DIGEST scan.json" | sha256sum --strict --check --status || exit -2
    # - name: Strip predicate
    #   run: jq -r .payload attestation.intoto.jsonl | base64 --decode | jq .predicate > provenance.json
    - name: Install Cosign
      uses: sigstore/cosign-installer@7e0881f8fe90b25e305bbf0309761e9314607e25 # v2.4.0
      with:
        cosign-release: 'v1.10.0'
    - name: Fetch SBOM
      run: cosign download sbom ${{ env.IMAGE }} > sbom.json
    # Troubleshooting step to show all files and show the cleaned provenance file
    # - name: List files
    #   run: ls -lahF && cat provenance.json
    - name: Log in to GHCR
      uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b # v2.0.0
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Sign image
      run: |
        cosign sign -a sha=${{ github.sha }} -a run_id=${{ github.run_id }} -a repo=${{ github.repository }} -a workflow=${{ github.workflow }} ${{ env.IMAGE }}
        echo "## Supply Chain Summary" >> $GITHUB_STEP_SUMMARY
        echo "Image signed: :heavy_check_mark:" >> $GITHUB_STEP_SUMMARY
      env:
        COSIGN_EXPERIMENTAL: "true"
    # - name: Attest provenance
    #   run: cosign attest --predicate provenance.json --type slsaprovenance ${{ env.IMAGE }}
    #   env:
    #     COSIGN_EXPERIMENTAL: "true"
    # - name: Attest provenance
    #   run: |
    #     cosign attach attestation --attestation attestation.intoto.jsonl ${{ env.IMAGE }}
    #     echo "Image provenance attested: :heavy_check_mark:" >> $GITHUB_STEP_SUMMARY
    #   env:
    #     COSIGN_EXPERIMENTAL: "true"
    - name: Attest SBOM
      run: |
        cosign attest --predicate sbom.json --type https://cyclonedx.org/bom ${{ env.IMAGE }}
        echo "Image SBOM attested: :heavy_check_mark:" >> $GITHUB_STEP_SUMMARY
      env:
        COSIGN_EXPERIMENTAL: "true"
    - name: Attest Scan
      run: |
        cosign attest --predicate scan.json --type https://trivy.aquasec.com/scan/v2 ${{ env.IMAGE }}
        echo "Image vulnerability scan attested:  :heavy_check_mark:" >> $GITHUB_STEP_SUMMARY
      env:
        COSIGN_EXPERIMENTAL: "true"
